Generator Log Started: 23/12/2024 7:11:20 PM
[+] Initializing Interface Generator
[+] Added GenerateInterfaceAttribute to compilation
[+] Starting incremental generation
[+] Extracted types for generation
[+] Registering source output
[+] Registered source output
[+] Beginning execution for 1 types
[+] Processing type ArenaEntityBase
[+] Generating interface for ArenaEntityBase
// <auto-generated/>

namespace sliced.Entities;

#nullable enable
public partial interface IArenaEntityBase
{
    void StartTeamColor(global::sliced.Arena.Shared.TeamColor teamColor);
    void StopTeamColor();
    void TogglePlayerName(bool show);
    void ForceSetSyncState(global::sliced.Entities.IArenaOnlineEntity entity, global::sliced.Entities.Online.ArenaEntitySyncUpdate initialState);
    bool FuckCache { get; set; }
    bool IsDisposed { get; }
    global::System.DateTime DisposedDateTime { get; }
    ulong DisposedTicksMs { get; }
    global::System.DateTime CreatedDateTime { get; }
    ulong CreatedTicksMs { get; }
    void LogDisposedDebug();
    global::sliced.Entities.Rig.RigWeaponHandler RigWeaponHandler { get; }
    global::sliced.Entities.Rig.RigCombatHandler RigCombatHandler { get; }
    global::sliced.Weapons.Melee.Tools.MeleeOneHandedWeaponTool MeleeOneHandedWeaponTool { get; }
    global::sliced.Weapons.Shields.ShieldTool ShieldTool { get; }
    global::sliced.Weapons.Bow.BowWeapon BowWeapon { get; }
    global::sliced.Throwables.Tool.ThrowableGrenadeTool ThrowableGrenadeTool { get; }
    global::sliced.Weapons.Ranged.RangedWeaponTool RangedWeaponTool { get; }
    global::Godot.Marker2D CenterMarker2D { get; }
    global::System.Numerics.Vector2 CenterPosition { get; }
    global::Core.QuadTree.QuadTreeNode? CurrentNode { get; set; }
    global::sliced.Entities.Inventory.ArenaInventory Inventory { get; }
    global::sliced.Entities.Combat.EntityDamageHandlerNoNode DamageHandler { get; }
    global::sliced.Entities.Combat.EntityKickHandler KickHandler { get; }
    global::sliced.Entities.Combat.EntityKnockBackHandler KnockBackHandler { get; }
    global::sliced.Entities.Sounds.SoundController SoundController { get; }
    global::sliced.Entities.Camera.PlayerCamera? GetPlayerCameraIfPlayer();
    global::sliced.Entities.Rig.RigController RigController { get; }
    global::sliced.Entities.Rig.Skeleton.RigSkeleton2D RigSkeleton2D { get; }
    global::sliced.Entities.Rig.AnimationTree.RigAnimationTree AnimationTree { get; }
    global::sliced.Multiplayer.Player.PlayerData? PlayerData { get; }
    global::sliced.Shared.Pools.NodePoolId NodePoolId { get; set; }
    global::sliced.Multiplayer.Player.PlayerId PlayerId { get; }
    ulong InitEngineTimeMs { get; }
    ulong ReturnToPoolEngineTimeMs { get; }
    global::Godot.Vector2 LookAtPosition { get; }
    global::Godot.Vector2 LookAtDirection { get; }
    global::Godot.Vector2 AimAtDirection { get; }
    global::sliced.Entities.ArenaEntityBase.DirectionX LookAtDirectionX { get; }
    global::Godot.Vector2 Direction { get; }
    global::Godot.Vector2 DeathVelocity { get; }
    bool InDeathMovement { get; }
    bool IsRunning { get; }
    float Speed { get; }
    global::Godot.Vector2 GlobalVelocity { get; }
    float Health { get; set; }
    bool IsValidTarget { get; }
    bool Dead { get; }
    ulong DeathTime { get; }
    double TimeSinceDeath { get; set; }
    bool IsLocalPlayer { get; }
    bool IsPlayer();
    bool IsPlayer([global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)] out global::sliced.Entities.ArenaPlayer arenaPlayer);
    bool IsBot { get; }
    string PlayerName { get; }
    float SecondsAlive { get; }
    bool LastPlayerStanding { get; }
    bool UsingTeamColor { get; }
    void SetUsingTeamColor(bool value);
    global::sliced.Arena.Shared.TeamColor TeamColor { get; }
    void SetTeamColor(global::sliced.Arena.Shared.TeamColor value);
    void ReturnToPool();
    void ReturnToPoolRpc();
    void InitForGpuCache();
    void RemoveFromScene();
    void KillOffScene();
    global::System.Drawing.RectangleF Rect { get; }
    global::System.Drawing.RectangleF BodyRect { get; }
    global::Godot.Rect2 GlobalPickupRect2 { get; }
    global::System.Drawing.RectangleF PickupRect { get; }
    global::System.Drawing.RectangleF SplatterRect { get; }
    global::Godot.Rect2 GlobalBodyRect2 { get; }
    global::System.Drawing.RectangleF GetRectangleFShiftedToLookAtDirection();
    global::System.Drawing.RectangleF GetRectangleFShiftedToDirection(global::Godot.Vector2 direction);
    global::System.Drawing.RectangleF GetRectFBasedOnSize(float size);
    global::Godot.Rect2 GlobalRect2DBySize(float size);
    void MapFromPlayerData(global::sliced.Multiplayer.Player.PlayerData playerData);
    void SetAsLastPlayerStanding();
    bool Equals(object? obj);
    int GetHashCode();
    string ToString();
    bool NotInScene { get; }
    global::sliced.Map.GameModes.CaptureTheFlag.CtfFlag? CarriedFlag { get; set; }
    bool HasFlag { get; set; }
    bool CanPickupFlag(global::sliced.Map.GameModes.CaptureTheFlag.CtfFlag ctfFlag);
    void PickupFlag(global::sliced.Map.GameModes.CaptureTheFlag.CtfFlag ctfFlag);
    void CaptureFlag(global::sliced.Map.GameModes.CaptureTheFlag.CtfFlag ctfFlag);
    void DropFlag();
    bool HasEnemyFlag();
    bool IsCarryingFlag(global::sliced.Map.GameModes.CaptureTheFlag.CtfFlag ctfFlag);
    global::sliced.Entities.Rig.AnimationTree.States.MovementState MovementStateEditor { get; }
    global::System.Collections.Generic.Queue<global::sliced.Entities.ArenaEntityBase.ISyncEvent> GetAndClearReplayEvents();
    global::System.Collections.Generic.Queue<global::sliced.Entities.ArenaEntityBase.ISyncEvent> ReplayEvents { get; }
    void ProcessReplayEvents(double delta);
    void ClearReplayEvents();
    bool IsSpawning { get; }
    void Init(global::Godot.Vector2 position, global::sliced.Weapons.AnyWeaponType weaponType, global::sliced.Weapons.Shields.ShieldType shieldType, global::sliced.Throwables.Grenade.GrenadeType grenadeType);
    void ResetEntity();
    global::System.Collections.Concurrent.ConcurrentQueue<global::sliced.Entities.Online.IArenaEntitySyncUnionEvent> ArenaEntitySyncEvents { get; }
    global::System.Collections.Generic.Queue<global::sliced.Entities.Online.IArenaEntitySyncUnionEvent> GetAndClearArenaEntitySyncEvents();
    void AddRemoteEvent(global::sliced.Entities.Online.IRemoteToEntitySyncEvent @event);
    void _Ready();
    void _ExitTree();
    void ProcessSyncEvents(double delta);
    void ClearSyncEvents();
    bool HandleStartKick(out bool isKicking);
    bool HandleJump();
    bool CanJump();
    void ApplyMovementForce(global::Godot.Vector2 force);
    bool IsInvisible();
    float InvisibilityAlpha { get; }
    void StartInvisibility();
    bool IsOnCatapult { get; set; }
    float CatapultDuration { get; }
    void SetCatapultShit(global::Godot.Vector2[] globalPoints);
    void HandleTeleport(global::Godot.Vector2 globalPosition, global::System.Action onMidTeleport);
    void OnLostBodyPart(global::sliced.Entities.BodyParts.Enums.LosableBodyPartType bodyPartType, float force);
    void StartBurning(float fireStrength, global::sliced.Entities.ArenaEntityBase from);
    void OnHurt(global::sliced.Entities.Combat.HurtEvent hurtEvent);
    void OnPanicStarted();
    void HandleDeathRpc(global::sliced.Entities.Rig.AnimationTree.States.DyingAnimationState dyingAnimationState);
    void SetDead();
    global::sliced.Entities.Rig.AnimationTree.States.WeaponState WeaponState { get; }
    global::sliced.Weapons.AnyWeaponType WeaponType { get; }
    void SetWeaponTypeRpc(global::sliced.Weapons.AnyWeaponType value);
    global::sliced.Throwables.Grenade.GrenadeType GrenadeType { get; }
    global::sliced.Weapons.Shields.ShieldType ShieldType { get; }
    void SetShieldTypeRpc(global::sliced.Weapons.Shields.ShieldType value);
    bool EmitTransitionCurrentSlotTo(global::sliced.Weapons.Shared.WeaponData weaponData, global::sliced.Entities.Inventory.TransitionSlotEvent transitionSlotEvent);
}

[+] Generated interface for ArenaEntityBase
